package com.formation.bankonet.controller;

import com.formation.bankonet.models.Client;
import com.formation.bankonet.models.CompteCourant;
import com.formation.bankonet.models.CompteEpargne;
import com.formation.bankonet.repositories.ClientRepository;
import com.formation.bankonet.repositories.CompteCourantRepository;
import com.formation.bankonet.repositories.CompteEpargneRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ClientRepository clientRepository;
    private CompteCourantRepository compteCourantRepository;
    private CompteEpargneRepository compteEpargneRepository;


    /*
            Client Handling

            addNewClient -> POST

            getListClients -> GET

            getClient -> GET
     */
    @PostMapping(path="/addClient") // Map ONLY POST Requests
    public @ResponseBody
    String addNewClient (@RequestParam String nom
            , @RequestParam String prenom) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Client n = new Client();
        //TODO post body
        /*n.setName(name);
        n.setEmail(email);*/
        clientRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/allClient")
    public @ResponseBody Iterable<Client> getListClients() {
        // This returns a JSON or XML with the users
        return clientRepository.findAll();
    }



    /*
            CompteCourant Handling

            addNewCompteCourant -> POST

            getCompteCourantList -> GET
     */
    @PostMapping(path="/addCompteCourant") // Map ONLY POST Requests
    public @ResponseBody
    String addNewCompteCourant (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        CompteCourant n = new CompteCourant();
        //TODO post body
        /*n.setName(name);
        n.setEmail(email);*/
        compteCourantRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/allCompteCourant")
    public @ResponseBody Iterable<CompteCourant> getCompteCourantList() {
        // This returns a JSON or XML with the users
        return compteCourantRepository.findAll();
    }


    /*
            CompteEpargne Handling

            addNewCompteEpargne -> POST

            getCompteEpargneList -> GET
     */
    @PostMapping(path="/addCompteCourant") // Map ONLY POST Requests
    public @ResponseBody
    String addNewCompteEpargne (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        CompteEpargne n = new CompteEpargne();
        //TODO post body
        /*n.setName(name);
        n.setEmail(email);*/
        compteEpargneRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/allCompteCourant")
    public @ResponseBody Iterable<CompteEpargne> getCompteEpargneList() {
        // This returns a JSON or XML with the users
        return compteEpargneRepository.findAll();
    }


}
